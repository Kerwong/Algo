package com;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Given an array of integers, find two numbers such that they add up to a
 * specific target number. The function twoSum should return indices of the two
 * numbers such that they add up to the target, where index1 must be less than
 * index2. Please note that your returned answers (both index1 and index2) are
 * not zero-based. You may assume that each input would have exactly one
 * solution.
 * 
 * Input: numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2
 * */

public class Solution {
	public int[] twoSum(int[] numbers, int target) {

		HashMap<Integer, Integer> hMap = new HashMap<Integer, Integer>();

		for (int i = 0; i < numbers.length; i++) {
			int j = numbers[i];
			hMap.put(j, i);
		}

		int[] res = new int[2];
		Integer ret = 0;
		for (int i = 0; i < numbers.length; i++) {
			ret = hMap.get(target - numbers[i]);

			if (null != ret) {
				if (ret > i) {
					res[0] = i;
					res[1] = ret;
				} else {
					res[0] = ret;
					res[1] = i;
				}
			}
		}
		return null;
	}
}
